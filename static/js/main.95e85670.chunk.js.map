{"version":3,"sources":["components/Card.js","components/Wrapper.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","clickHandler","alt","name","src","image","id","style","height","Wrapper","children","Header","score","highScore","App","state","images","userScore","win","isClicked","newArr","parseInt","clicked","setState","event","preventDefault","target","idInt","filter","img","pop","console","log","newScore","shuffleArray","arr","sort","Math","random","this","map","item","key","imgFile","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6uCAWeA,EARF,SAAAC,GAAK,OACd,yBAAKC,UAAU,OAAOC,QAASF,EAAMG,cACjC,yBAAKF,UAAU,iBACX,yBAAKG,IAAKJ,EAAMK,KAAMC,IAAKN,EAAMO,MAAOC,GAAIR,EAAMQ,GAAIC,MAAO,CAAEC,OAAQ,UCDpEC,EAFC,SAAAX,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAMY,WCS1CC,EATA,SAAAb,GAAK,OAChB,yBAAKC,UAAU,UACX,yBAAKA,UAAU,SAASD,EAAMY,UAC9B,yBAAKX,UAAU,UAAf,UACYD,EAAMc,MADlB,eACqCd,EAAMe,a,OC+EpCC,G,iNA9EbC,MAAQ,CACNC,SACAC,UAAW,EACXJ,UAAW,EACXK,KAAK,G,EASPC,UAAY,SAAAb,GACV,IAAMc,EAAS,EAAKL,MAAMC,OADV,uBAEhB,YAAkBI,EAAlB,+CAA0B,CAAC,IAAlBf,EAAiB,QAEpBA,EAAMC,KAAOe,SAASf,KACxBD,EAAMiB,SAAU,IALJ,kFAUhB,EAAKC,SAAS,CAAEP,OAAQI,K,EAG1BnB,aAAe,SAAAuB,GACbA,EAAMC,iBADgB,IAEdnB,EAAOkB,EAAME,OAAbpB,GACFqB,EAAQN,SAASf,GACjBD,EAAQ,EAAKU,MAAMC,OAAOY,QAAO,SAAAC,GAAG,OAAIA,EAAIvB,KAAOqB,KAAOG,MAIhE,GAHAC,QAAQC,IAAI,QAAS3B,GACrB0B,QAAQC,KAAsB,IAAlB3B,EAAMiB,UAEI,IAAlBjB,EAAMiB,QACR,EAAKC,SAAS,CAAEN,UAAW,IAC3Bc,QAAQC,IAAI,aACZ,EAAKT,SAAS,CACZP,OAAQA,QAEL,CACL,EAAKG,UAAUb,GACfyB,QAAQC,IAAI,OAAQ1B,GACpB,IAAM2B,EAAW,EAAKlB,MAAME,UAAY,EACxC,EAAKM,SAAS,CACZN,UAAWgB,IAETA,EAAW,EAAKlB,MAAMF,WACxB,EAAKU,SAAS,CACZV,UAAWoB,IAIjB,IAAMb,EAAS,EAAKc,aAAalB,GACjC,EAAKO,SAAS,CAAEP,OAAQI,K,4EA/Cbe,GACX,OAAOA,EAAIC,MAAK,WACd,OAAOC,KAAKC,SAAW,Q,+BAiDjB,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQ1B,MAAO2B,KAAKxB,MAAME,UAAWJ,UAAW0B,KAAKxB,MAAMF,WAA3D,eAGC0B,KAAKxB,MAAMC,OAAOwB,KAAI,SAAAC,GAAI,OACzB,kBAAC,EAAD,CACExC,aAAc,EAAKA,aACnBqB,QAASmB,EAAKnB,QACdhB,GAAImC,EAAKnC,GACToC,IAAKD,EAAKnC,GACVD,MAAOoC,EAAKE,kB,GAvENC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.95e85670.chunk.js","sourcesContent":["import React from \"react\";\n//import \"./Card.css\";\n\nconst Card = props => (\n    <div className=\"card\" onClick={props.clickHandler}>\n        <div className=\"img-container\">\n            <img alt={props.name} src={props.image} id={props.id} style={{ height: 100 }} />\n        </div>\n    </div>\n);\n\nexport default Card;\n\n\n","import React from \"react\";\n//import \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\n//import \"./Header.css\";\n\nconst Header = props => (\n    <div className=\"header\">\n        <div className=\"title\">{props.children}</div>\n        <div className=\"scores\">\n            Score: {props.score} Highscore: {props.highScore}\n        </div>\n    </div>\n);\n\nexport default Header;","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport images from \"./images.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    images,\n    userScore: 0,\n    highScore: 0,\n    win: true\n  };\n\n  shuffleArray(arr) {\n    return arr.sort(() => {\n      return Math.random() - 0.5;\n    });\n  }\n\n  isClicked = id => {\n    const newArr = this.state.images;\n    for (let image of newArr) {\n      // console.log(image);\n      if (image.id === parseInt(id)) {\n        image.clicked = true;\n      }\n    }\n\n    // console.log(\"newArr:\", newArr)\n    this.setState({ images: newArr });\n  };\n\n  clickHandler = event => {\n    event.preventDefault();\n    const { id } = event.target;\n    const idInt = parseInt(id);\n    const image = this.state.images.filter(img => img.id === idInt).pop();\n    console.log(\"image\", image);\n    console.log(image.clicked === true);\n\n    if (image.clicked === true) {\n      this.setState({ userScore: 0 });\n      console.log(\"You lose!\");\n      this.setState({\n        images: images\n      });\n    } else {\n      this.isClicked(id);\n      console.log(\"else\", id);\n      const newScore = this.state.userScore + 1;\n      this.setState({\n        userScore: newScore\n      });\n      if (newScore > this.state.highScore) {\n        this.setState({\n          highScore: newScore\n        });\n      }\n    }\n    const newArr = this.shuffleArray(images);\n    this.setState({ images: newArr });\n    // console.log('Image Array:', this.state.images)\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Header score={this.state.userScore} highScore={this.state.highScore}>\n          Clicky Game\n        </Header>\n        {this.state.images.map(item => (\n          <Card\n            clickHandler={this.clickHandler}\n            clicked={item.clicked}\n            id={item.id}\n            key={item.id}\n            image={item.imgFile}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}